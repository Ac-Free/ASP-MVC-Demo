@model MyItem.Models.ViewModels.PaginatedList<MyItem.Models.Entities.Book>

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "书籍列表";

    // session获取用户数据
    var userId = HttpContextAccessor.HttpContext.Session.GetInt32("UserId");
    var userName = HttpContextAccessor.HttpContext.Session.GetString("UserName");
}

<div class="container mt-4">
    @if (userId.HasValue)
    {
        <h1 class="display-4 mb-4">书籍列表</h1>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="row">
            @if (Model != null && Model.Items.Any())
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">书名</th>
                            <th scope="col">状态</th>
                            <th scope="col">操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var book in Model.Items)
                        {
                            <tr>
                                <td>@book.Id</td>
                                <td>@book.BookName</td>
                                @if (book.Status == 0)
                                {
                                    <td>可借阅</td>
                                }
                                else
                                {
                                    <td>已被 @book.User.UserName 借阅</td>
                                }
                                <td>
                                    @if (book.Status == 0)
                                    {
                                        <button type="button" class="btn btn-primary" onclick="borrowBook(@book.Id)">借阅</button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-primary" disabled>借阅</button>
                                        @if (book.UserId == userId)
                                        {
                                            <button type="button" class="btn btn-primary" onclick="unBorrowBook(@book.Id)">归还</button>
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- 分页控件 -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        显示 @Model.Items.Count 条，共 @Model.TotalItems 条记录
                    </div>
                    <nav aria-label="Page navigation">
                        <ul class="pagination">
                            @if (Model.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = Model.PageIndex - 1 })" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <a class="page-link" href="#" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                            }

                            @for (int i = Math.Max(1, Model.PageIndex - 2); i <= Math.Min(Model.TotalPages, Model.PageIndex + 2); i++)
                            {
                                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                </li>
                            }

                            @if (Model.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = Model.PageIndex + 1 })" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <a class="page-link" href="#" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    暂无图书记录。
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning mt-4">
            <h4>未登录</h4>
            <p>正在跳转到登录页面...</p>
        </div>

        <script>
            // 1秒后自动跳转到登录页面
            setTimeout(() => {
                window.location.href = '@Url.Action("Login", "User")';
            }, 1000);
        </script>
    }
</div>

@section Scripts {
    <script>
        function borrowBook(bookId) {
            if (!confirm('确定要借阅这本书吗？')) {
                return;
            }

            axios.post("/Home/Make/" + bookId)
            .then(response => {
                if (response.data.success) {
                    alert(response.data.message);
                    // 刷新页面以显示最新状态
                    window.location.reload();
                } else {
                    alert(response.data.message);
                }
            })
            .catch(error => {
                console.error('借阅失败:', error);
                alert('借阅失败，请稍后重试');
            });
        }
        function unBorrowBook(bookId){
            if (!confirm('确定要归还这本书吗？')) {
                return;
            }

            axios.post("/Home/UnMake/" + bookId)
            .then(response => {
                if (response.data.success) {
                    alert(response.data.message);
                    // 刷新页面以显示最新状态
                    window.location.reload();
                } else {
                    alert(response.data.message);
                }
            })
           .catch(error => {
                console.error('归还失败:', error);
                alert('归还失败，请稍后重试');
            });
        }
    </script>
}
